require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/fields' do
  # This should return the minimal set of attributes required to create a valid
  # Field. As you add validations to Field, be sure to
  # adjust the attributes here as well.
  let(:blueprint) { FactoryBot.create(:blueprint) }
  let(:valid_attributes) { FactoryBot.attributes_for(:field).merge(blueprint_id: blueprint.id) }
  let(:invalid_attributes) { FactoryBot.attributes_for(:field, name: 'Bad name!').merge(blueprint_id: blueprint.id) }

  describe 'GET /index' do
    it 'renders a successful response' do
      Field.create! valid_attributes
      get blueprint_fields_path(blueprint.id)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      field = Field.create! valid_attributes
      get field_url(field)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_blueprint_field_url('1')
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      field = Field.create! valid_attributes
      get edit_field_url(field)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Field' do
        expect do
          post blueprint_fields_path(blueprint.id), params: { field: valid_attributes.except(:blueprint_id) }
        end.to change(Field, :count).by(1)
      end

      it 'redirects to the created field' do
        post blueprint_fields_url(blueprint.id), params: { field: valid_attributes }
        expect(response).to redirect_to(field_url(Field.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Field' do
        expect do
          post blueprint_fields_url(blueprint.id), params: { field: invalid_attributes }
        end.not_to change(Field, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post blueprint_fields_url(blueprint.id), params: { field: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) { { name: 'a_new_name', required: true } }

      it 'updates the requested field', :aggregate_failures do
        field = Field.create! valid_attributes
        expect(field.name).to eq 'MyString'
        patch field_url(field), params: { field: new_attributes }
        field.reload
        expect(field.name).to eq 'a_new_name'
      end

      it 'redirects to the field' do
        field = Field.create! valid_attributes
        patch field_url(field), params: { field: new_attributes }
        field.reload
        expect(response).to redirect_to(field_url(field))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        field = Field.create! valid_attributes
        patch field_url(field), params: { field: invalid_attributes, blueprint_id: blueprint.id }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested field' do
      field = Field.create! valid_attributes
      expect do
        delete field_url(field)
      end.to change(Field, :count).by(-1)
    end

    it 'redirects to the fields list' do
      field = Field.create! valid_attributes
      delete field_url(field)
      expect(response).to redirect_to(blueprint_url(field.blueprint_id))
    end
  end
end
