require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/ingests' do
  # This should return the minimal set of attributes required to create a valid
  # Ingest. As you add validations to Ingest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { user: super_admin, status: 'queued' } }
  let(:invalid_attributes) { { size: 'invalid' } }
  let(:super_admin)  { FactoryBot.create(:super_admin) }
  let(:regular_user) { FactoryBot.create(:user) }

  before { login_as super_admin }

  describe 'GET admin/index' do
    it 'renders a successful response' do
      Ingest.create! valid_attributes
      get ingests_url
      expect(response).to be_successful
    end
  end

  describe 'GET admin/show' do
    it 'renders a successful response' do
      ingest = Ingest.create! valid_attributes
      get ingest_url(ingest)
      expect(response).to be_successful
    end
  end

  describe 'GET admin/new' do
    it 'renders a successful response' do
      get new_ingest_url
      expect(response).to be_successful
    end
  end

  describe 'GET admin/edit' do
    it 'renders a successful response' do
      ingest = Ingest.create! valid_attributes
      get edit_ingest_url(ingest)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Ingest' do
        expect do
          post ingests_url, params: { ingest: valid_attributes }
        end.to change(Ingest, :count).by(1)
      end

      it 'redirects to the created ingest' do
        post ingests_url, params: { ingest: valid_attributes }
        expect(response).to redirect_to(ingests_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Ingest' do
        expect do
          post ingests_url, params: { ingest: invalid_attributes }
        end.not_to change(Ingest, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post ingests_url, params: { ingest: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { status: 'completed' }
      end

      it 'updates the requested ingest' do
        ingest = Ingest.create! valid_attributes
        patch ingest_url(ingest), params: { ingest: new_attributes }
        ingest.reload
        expect(ingest.status).to eq 'completed'
      end

      it 'redirects to the ingest' do
        ingest = Ingest.create! valid_attributes
        patch ingest_url(ingest), params: { ingest: new_attributes }
        ingest.reload
        expect(response).to redirect_to(ingests_url)
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        ingest = Ingest.create! valid_attributes
        patch ingest_url(ingest), params: { ingest: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested ingest' do
      ingest = Ingest.create! valid_attributes
      expect do
        delete ingest_url(ingest)
      end.to change(Ingest, :count).by(-1)
    end

    it 'redirects to the ingests list' do
      ingest = Ingest.create! valid_attributes
      delete ingest_url(ingest)
      expect(response).to redirect_to(ingests_url)
    end
  end

  describe 'resctricts access' do
    example 'for guest users' do
      logout
      get ingests_url
      expect(response).to be_not_found
    end

    example 'for non-admin users' do
      login_as regular_user
      get ingests_url
      expect(response).to be_unauthorized
    end
  end
end
