require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/vocabularies' do
  # This should return the minimal set of attributes required to create a valid
  # Vocabulary. As you add validations to Vocabulary, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryBot.attributes_for(:vocabulary) }
  let(:invalid_attributes) { { key: '<Invalid $lug!>' } }
  let(:super_admin)  { FactoryBot.create(:super_admin) }
  let(:regular_user) { FactoryBot.create(:user) }

  before { login_as super_admin }

  describe 'GET /index' do
    it 'renders a successful response' do
      Vocabulary.create! valid_attributes
      get vocabularies_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      vocabulary = Vocabulary.create! valid_attributes
      get vocabulary_url(vocabulary)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_vocabulary_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      vocabulary = Vocabulary.create! valid_attributes
      get edit_vocabulary_url(vocabulary)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Vocabulary' do
        expect do
          post vocabularies_url, params: { vocabulary: valid_attributes }
        end.to change(Vocabulary, :count).by(1)
      end

      it 'redirects to the created vocabulary' do
        post vocabularies_url, params: { vocabulary: valid_attributes }
        expect(response).to redirect_to(vocabulary_url(Vocabulary.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Vocabulary' do
        expect do
          post vocabularies_url, params: { vocabulary: invalid_attributes }
        end.not_to change(Vocabulary, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post vocabularies_url, params: { vocabulary: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { label: 'Updated Vocabulary Label' }
      end

      it 'updates the requested vocabulary' do
        vocabulary = Vocabulary.create! valid_attributes
        patch vocabulary_url(vocabulary), params: { vocabulary: new_attributes }
        vocabulary.reload
        expect(vocabulary.label).to eq 'Updated Vocabulary Label'
      end

      it 'redirects to the vocabulary' do
        vocabulary = Vocabulary.create! valid_attributes
        patch vocabulary_url(vocabulary), params: { vocabulary: new_attributes }
        vocabulary.reload
        expect(response).to redirect_to(vocabulary_url(vocabulary))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        vocabulary = Vocabulary.create! valid_attributes
        patch vocabulary_url(vocabulary), params: { vocabulary: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested vocabulary' do
      vocabulary = Vocabulary.create! valid_attributes
      expect do
        delete vocabulary_url(vocabulary)
      end.to change(Vocabulary, :count).by(-1)
    end

    it 'redirects to the vocabularies list' do
      vocabulary = Vocabulary.create! valid_attributes
      delete vocabulary_url(vocabulary)
      expect(response).to redirect_to(vocabularies_url)
    end
  end

  describe 'resctricts access' do
    example 'for guest users' do
      logout
      get vocabularies_url
      expect(response).to be_not_found
    end

    example 'for non-admin users' do
      login_as regular_user
      get vocabularies_url
      expect(response).to be_unauthorized
    end
  end
end
