require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/configs' do
  # This should return the minimal set of attributes required to create a valid
  # Config. As you add validations to Config, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) { FactoryBot.attributes_for(:config) }
  let(:invalid_attributes) do
    {
      solr_host: 'ftp://example.org',
      solr_version: ''
    }
  end

  let(:super_admin)  { FactoryBot.create(:super_admin) }
  let(:regular_user) { FactoryBot.create(:user) }

  before do
    # Stub out a minimal solr server
    solr_client = instance_double RSolr::Client
    allow(RSolr).to receive(:connect).and_return(solr_client)
    allow(solr_client).to receive(:get).and_return(
      { 'lucene' => { 'solr-spec-version' => '9.2.1' } }
    )

    FactoryBot.create(:config_with_fields)

    # Login as a privleged user
    login_as super_admin
  end

  describe 'GET / (/index)' do
    it 'renders a successful response' do
      Config.create! valid_attributes
      get configs_url
      expect(response).to be_successful
    end
  end

  describe 'GET /configs/show' do
    it 'renders a successful response' do
      config = Config.create! valid_attributes
      get config_url(config)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_config_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      config = Config.create! valid_attributes
      get edit_config_url(config)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid host only' do
      let(:test_host) { 'http://localhost:8983' }

      it 'verifies the host' do
        post configs_url, params: { config: { setup_step: 'host', solr_host: test_host } }
        config = controller.view_assigns['config']
        expect(config.solr_version).not_to be_nil
      end

      it 'responds succesfully' do
        post configs_url, params: { config: { setup_step: 'host', solr_host: test_host } }
        expect(response).to have_http_status(:accepted)
      end

      it 'renders the updated new form with solr_version populated' do
        post configs_url, params: { config: { setup_step: 'host', solr_host: test_host } }
        expect(response.body).to include 'value="9.2.1"'
      end
    end

    context 'with valid host and core' do
      let(:step_attributes) do
        { setup_step: 'core', solr_host: 'http://localhost:8983', solr_verison: '9.2.1', solr_core: 'tenejo' }
      end

      it 'saves the new config' do
        expect { post configs_url, params: { config: step_attributes } }.to change(Config, :count).by(1)
      end

      it 'redirects to the newly created config' do
        post configs_url, params: { config: step_attributes }
        expect(response).to redirect_to Config.last
      end
    end

    context 'with valid parameters' do
      it 'creates a new Config' do
        expect do
          post configs_url, params: { config: valid_attributes }
        end.to change(Config, :count).by(1)
      end

      it 'redirects to the created config' do
        post configs_url, params: { config: valid_attributes }
        expect(response).to redirect_to(config_url(Config.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Config' do
        expect do
          post configs_url, params: { config: invalid_attributes }
        end.not_to change(Config, :count)
      end

      it 'renders a response with "accepted" status (i.e. to display the "new" template)' do
        post configs_url, params: { config: invalid_attributes }
        expect(response).to have_http_status(:accepted)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { fields: [{ solr_field_name: 'index_field1', display_label: 'Label' },
                   { solr_field_name: 'another_index_field', display_label: 'Another Label' }] }
      end

      it 'updates the requested config' do
        config = Config.create! valid_attributes
        patch config_url(config), params: { config: new_attributes }
        config.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the config' do
        config = Config.create! valid_attributes
        patch config_url(config), params: { config: new_attributes }
        config.reload
        expect(response).to redirect_to(config_url(config))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        config = Config.create! valid_attributes
        patch config_url(config), params: { config: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested config' do
      config = Config.create! valid_attributes
      expect do
        delete config_url(config)
      end.to change(Config, :count).by(-1)
    end

    it 'redirects to the configs list' do
      config = Config.create! valid_attributes
      delete config_url(config)
      expect(response).to redirect_to(configs_url)
    end
  end

  describe 'resctricts access' do
    example 'for guest users' do
      logout
      Config.create! valid_attributes
      get configs_url
      expect(response).to be_not_found
    end

    example 'for non-admin users' do
      login_as regular_user
      Config.create! valid_attributes
      get configs_url
      expect(response).to be_unauthorized
    end
  end
end
