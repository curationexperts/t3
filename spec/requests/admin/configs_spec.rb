require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/configs' do
  # This should return the minimal set of attributes required to create a valid
  # Config. As you add validations to Config, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) { FactoryBot.attributes_for(:config) }
  let(:invalid_attributes) do
    {
      solr_host: 'ftp://example.org',
      solr_version: ''
    }
  end

  let(:super_admin)  { FactoryBot.create(:super_admin) }
  let(:regular_user) { FactoryBot.create(:user) }

  before do
    # Stub out a minimal solr server
    solr_client = instance_double RSolr::Client
    allow(RSolr).to receive(:connect).and_return(solr_client)
    allow(solr_client).to receive(:get).and_return(
      { 'lucene' => { 'solr-spec-version' => '9.2.1' } }
    )

    FactoryBot.create(:config_with_fields)

    # Login as a privleged user
    login_as super_admin
  end

  describe 'GET /admin/config/show' do
    it 'renders a successful response' do
      get config_url
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/config/edit' do
    it 'renders a successful response' do
      get edit_config_url
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { fields_attributes: { '0' => { solr_field_name: 'index_field1', display_label: 'Label' },
                               '1' => { solr_field_name: 'another_index_field', display_label: 'Another Label' } } }
      end

      it 'updates the requested config' do
        expect { patch config_url, params: { config: new_attributes } }
          .to change { Config.current.fields.map(&:display_label) }
          .from(['Title', 'Identifier'])
          .to(['Label', 'Another Label'])
      end

      it 'redirects to the config' do
        patch config_url, params: { config: new_attributes }
        expect(response).to redirect_to(config_url)
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch config_url, params: { config: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'resctricts access' do
    example 'for guest users' do
      logout
      get config_url
      expect(response).to be_not_found
    end

    example 'for non-admin users' do
      login_as regular_user
      get config_url
      expect(response).to be_unauthorized
    end
  end
end
